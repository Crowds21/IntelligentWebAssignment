<!DOCTYPE html>
<html>
<%- include ('./component/index_head.ejs') %>
<body onload="initPage()" style="height: 100%;width: 100%">
<%- include ('./component/navbar.ejs') %>
<%- include ('./component/user-setting.ejs') %>
<style>
    .btn-a{
        position: relative;
        display: inline-block;
        padding: 10px 20px;
        color: #03e9f4;
        font-size: 16px;
        text-decoration: none;
        text-transform: uppercase;
        overflow: hidden;
        transition: .5s;
        margin-top: 40px;
        letter-spacing: 4px;
        margin-bottom: 20px;
    }
    .btn-a:hover{
        background: #03e9f4;
        color: #fff;
        border-radius: 5px;
        box-shadow: 0 0 5px #03e9f4,
        0 0 25px #03e9f4,
        0 0 50px #03e9f4,
        0 0 100px #03e9f4;
    }
    .btn-a span{
        position: absolute;
        display: block;
    }
    .btn-a span:nth-child(1) {
        top: 0;
        left: -100%;
        width: 100%;
        height: 2px;
        background: linear-gradient(90deg, transparent, #03e9f4);
        animation: btn-anim1 1s linear infinite;
    }
    @keyframes btn-anim1 {
        0% {
            left: -100%;
        }
        50%,100% {
            left: 100%;
        }
    }

    .btn-a span:nth-child(2) {
        top: -100%;
        right: 0;
        width: 2px;
        height: 100%;
        background: linear-gradient(180deg, transparent, #03e9f4);
        animation: btn-anim2 1s linear infinite;
        animation-delay: .25s
    }

    @keyframes btn-anim2 {
        0% {
            top: -100%;
        }
        50%,100% {
            top: 100%;
        }
    }

    .btn-a span:nth-child(3) {
        bottom: 0;
        right: -100%;
        width: 100%;
        height: 2px;
        background: linear-gradient(270deg, transparent, #03e9f4);
        animation: btn-anim3 1s linear infinite;
        animation-delay: .5s
    }

    @keyframes btn-anim3 {
        0% {
            right: -100%;
        }
        50%,100% {
            right: 100%;
        }
    }

    .btn-a span:nth-child(4) {
        bottom: -100%;
        left: 0;
        width: 2px;
        height: 100%;
        background: linear-gradient(360deg, transparent, #03e9f4);
        animation: btn-anim4 1s linear infinite;
        animation-delay: .75s
    }

    @keyframes btn-anim4 {
        0% {
            bottom: -100%;
        }
        50%,100% {
            bottom: 100%;
        }
    }
    .btn-tab{
        position: relative;
        width: 100px;
        height: 60px;
        text-align: center;
        line-height: 60px;
        margin-right: 50px;
        text-decoration: none;
        color: aqua;
        font-size: 20px;
        padding: 0 20px;
        text-transform: uppercase;
        transition: 0.5s;
        overflow: hidden;
        -webkit-box-reflect: below 1px linear-gradient(transparent, #1113);
    }
    .btn-tab::before {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 20px;
        height: 20px;
        border-top: 2px solid aqua;
        border-left: 2px solid aqua;
        transition: 0.5s;
        transition-delay: 0.5s;
    }
    .btn-tab::after {
        content: '';
        position: absolute;
        bottom: 0;
        right: 0;
        width: 20px;
        height: 20px;
        border-bottom: 2px solid aqua;
        border-right: 2px solid aqua;
        transition: 0.5s;
        transition-delay: 0.5s;
    }
    .btn-tab:hover::before, .btn-tab:hover::after {
        width: 100%;
        height: 100%;
        transition-delay: 0s;
    }
    .btn-tab:hover {
        background-color: aqua;
        color: #000;
        box-shadow: 0 0 50px #21ebff;
        transition-delay: 0.3s;
    }
    .btn-tab:nth-child(1) {
        filter: hue-rotate(150deg);
    }
    .btn-tab:nth-child(3) {
        filter: hue-rotate(270deg);
    }
    .btn-tab:nth-child(4) {
        filter: hue-rotate(400deg);
    }
    .btn-tab:nth-child(5) {
        filter: hue-rotate(70deg);
    }
    .card-hover{
        transition: all  .1s  ease-in;
    }
    .card-hover:hover{
        box-shadow: 0px 0px 50px #c7e6c8;
        transform: translate(0,-10px);

    }
</style>
<div class="container my-5">
    <!--头部tab+创建-->
    <div class="row mb-3">
        <div class="col">
            <!--<button type="button" class="btn btn-primary mr-2" id="create-btn" onclick="showCreate()">Create</button>-->
            <a href="#" class="btn-a" onclick="showCreate()">
                <span></span>
                <span></span>
                <span></span>
                <span></span>
                Create
            </a>
            <ul class="nav nav-tabs" id="myTab" >
                <li class="nav-item">
<!--
                    <button class="nav-link active" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" type="button" role="tab" aria-controls="home" aria-selected="true" >By Date</button>
-->
                    <a href="#" class="btn-tab" id="home-tab" data-bs-toggle="tab" data-bs-target="#home" role="tab" aria-controls="home" aria-selected="true" >By Date</a>
                </li>
                <li class="nav-item">
                    <a href="#"  class="btn-tab" aria-controls="profile" aria-selected="false" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile">By Location</a>
<!--
                    <button class="nav-link" id="profile-tab" data-bs-toggle="tab" data-bs-target="#profile" type="button" role="tab" aria-controls="profile" aria-selected="false" >By Location</button>
-->
                </li>
            </ul>
        </div>
    </div>
    <div class="tab-content" id="myTabContent">
        <!--主体Card-->
        <div class="tab-pane active " id="home" role="tabpanel" aria-labelledby="home-tab" tabindex="0">
            <div class="row" id = "cardRow">
                <% byDate.forEach(function(data) { %>
                    <div class="col-md-4 home-page-sight-card" id="<%= data._id %>">
                        <a href="/sightDetails/<%= data._id %>" class="card-link home-page home-page-sight-card"
                           id="<%= data._id %>">
                            <div class="card mb-3  card-hover">
                                <img src="uploads/<%= data.image %>" class="card-img-top" alt="" style="height: 250px; width: 100%">
                                <div class="card-body">
                                    <h5 class="card-title"><%= data.identification %></h5>
                                    <p class="card-id" style="display: none"><%= data._id %> </p>
                                    <p class="card-username"><%= data.user_name %> </p>
                                    <p class="card-date"> <%= data.date %></p>
                                </div>
                            </div>
                        </a>
                    </div>
                <% }); %>
            </div>
        </div>
       <div class="tab-pane" id="profile" role="tabpanel" aria-labelledby="profile-tab" tabindex="0">
            <div class="row" id = "cardRow">
                <% byLocation.forEach(function(data) { %>
                    <div class="col-md-4 home-page-sight-card" id="<%= data._id %>">
                        <a href="/sightDetails/<%= data._id %>" class="card-link home-page home-page-sight-card"
                           id="<%= data._id %>">
                            <div class="card mb-3 card-hover">
                                <img src="uploads/<%= data.image %>" class="card-img-top" alt=""  style="height: 250px; width: 100%">
                                <div class="card-body">
                                    <h5 class="card-title"><%= data.identification %></h5>
                                    <p class="card-id" style="display: none"><%= data._id %> </p>
                                    <p class="card-username"><%= data.user_name %> </p>
                                    <p class="card-date"> <%= data.date %></p>
                                </div>
                            </div>
                        </a>
                    </div>
                <% }); %>
            </div>
        </div>
    </div>
</div>
<div id="addSight" class="modal" tabindex="-1">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">New Sighting</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"
                        onclick="closeModal()"></button>
            </div>
            <form enctype="multipart/form-data">
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="col-form-label">Date:</label>
                        <input type="date" name="date" class="form-control" id="date">
                    </div>
                    <div class="mb-3">
                        <label class="col-form-label">Location:</label>
                        <input name="location" name="location" class="form-control" id="location">
                        <div id="map-container">
                            <label class="visually-hidden" for="map"></label>
                            <div id="map" style="height: 300px; width: 300px;"></div>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label class="col-form-label">Description:</label>
                        <input name="description" name="description" class="form-control" id="description">
                    </div>
                    <div class="mb-3">
                        <label class="col-form-label">Identification:</label>
                        <input name="identification" name="identification" class="form-control" id="identification">
                    </div>
                    <div class="mb-3">
                        <label class="col-form-label">Image:</label>
                        <input type="file" name="image" id="image" class="form-control">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" onclick="closeModal()">
                        Close
                    </button>
                    <button type="button" onclick="addSight()" class="btn btn-primary">Save</button>
                </div>
            </form>
        </div>
    </div>
</div>
<script>
    /**
     * Ribbons Class File.
     * Creates low-poly ribbons background effect inside a target container.
     */
    (function (name, factory)
    {
        if (typeof window === "object")
        {
            window[name] = factory();
        }

    })("Ribbons", function ()
    {
        var _w = window,
            _b = document.body,
            _d = document.documentElement;

        // random helper
        var random = function ()
        {
            if (arguments.length === 1) // only 1 argument
            {
                if (Array.isArray(arguments[0])) // extract index from array
                {
                    var index = Math.round(random(0, arguments[0].length - 1));
                    return arguments[0][index];
                }
                return random(0, arguments[0]); // assume numeric
            } else
            if (arguments.length === 2) // two arguments range
            {
                return Math.random() * (arguments[1] - arguments[0]) + arguments[0];
            }
            return 0; // default
        };

        // screen helper
        var screenInfo = function (e)
        {
            var width = Math.max(0, _w.innerWidth || _d.clientWidth || _b.clientWidth || 0),
                height = Math.max(0, _w.innerHeight || _d.clientHeight || _b.clientHeight || 0),
                scrollx = Math.max(0, _w.pageXOffset || _d.scrollLeft || _b.scrollLeft || 0) - (_d.clientLeft || 0),
                scrolly = Math.max(0, _w.pageYOffset || _d.scrollTop || _b.scrollTop || 0) - (_d.clientTop || 0);

            return {
                width: width,
                height: height,
                ratio: width / height,
                centerx: width / 2,
                centery: height / 2,
                scrollx: scrollx,
                scrolly: scrolly };

        };

        // mouse/input helper
        var mouseInfo = function (e)
        {
            var screen = screenInfo(e),
                mousex = e ? Math.max(0, e.pageX || e.clientX || 0) : 0,
                mousey = e ? Math.max(0, e.pageY || e.clientY || 0) : 0;

            return {
                mousex: mousex,
                mousey: mousey,
                centerx: mousex - screen.width / 2,
                centery: mousey - screen.height / 2 };

        };

        // point object
        var Point = function (x, y)
        {
            this.x = 0;
            this.y = 0;
            this.set(x, y);
        };
        Point.prototype = {
            constructor: Point,

            set: function (x, y)
            {
                this.x = x || 0;
                this.y = y || 0;
            },
            copy: function (point)
            {
                this.x = point.x || 0;
                this.y = point.y || 0;
                return this;
            },
            multiply: function (x, y)
            {
                this.x *= x || 1;
                this.y *= y || 1;
                return this;
            },
            divide: function (x, y)
            {
                this.x /= x || 1;
                this.y /= y || 1;
                return this;
            },
            add: function (x, y)
            {
                this.x += x || 0;
                this.y += y || 0;
                return this;
            },
            subtract: function (x, y)
            {
                this.x -= x || 0;
                this.y -= y || 0;
                return this;
            },
            clampX: function (min, max)
            {
                this.x = Math.max(min, Math.min(this.x, max));
                return this;
            },
            clampY: function (min, max)
            {
                this.y = Math.max(min, Math.min(this.y, max));
                return this;
            },
            flipX: function ()
            {
                this.x *= -1;
                return this;
            },
            flipY: function ()
            {
                this.y *= -1;
                return this;
            } };


        // class constructor
        var Factory = function (options)
        {
            this._canvas = null;
            this._context = null;
            this._sto = null;
            this._width = 0;
            this._height = 0;
            this._scroll = 0;
            this._ribbons = [];
            this._options = {
                // ribbon color HSL saturation amount
                colorSaturation: "80%",
                // ribbon color HSL brightness amount
                colorBrightness: "60%",
                // ribbon color opacity amount
                colorAlpha: 0.65,
                // how fast to cycle through colors in the HSL color space
                colorCycleSpeed: 6,
                // where to start from on the Y axis on each side (top|min, middle|center, bottom|max, random)
                verticalPosition: "center",
                // how fast to get to the other side of the screen
                horizontalSpeed: 200,
                // how many ribbons to keep on screen at any given time
                ribbonCount: 3,
                // add stroke along with ribbon fill colors
                strokeSize: 0,
                // move ribbons vertically by a factor on page scroll
                parallaxAmount: -0.5,
                // add animation effect to each ribbon section over time
                animateSections: true };

            this._onDraw = this._onDraw.bind(this);
            this._onResize = this._onResize.bind(this);
            this._onScroll = this._onScroll.bind(this);
            this.setOptions(options);
            this.init();
        };

        // class prototype
        Factory.prototype = {
            constructor: Factory,

            // Set and merge local options
            setOptions: function (options)
            {
                if (typeof options === "object")
                {
                    for (var key in options)
                    {
                        if (options.hasOwnProperty(key))
                        {
                            this._options[key] = options[key];
                        }
                    }
                }
            },

            // Initialize the ribbons effect
            init: function ()
            {
                try
                {
                    this._canvas = document.createElement("canvas");
                    this._canvas.style["display"] = "block";
                    this._canvas.style["position"] = "fixed";
                    this._canvas.style["margin"] = "0";
                    this._canvas.style["padding"] = "0";
                    this._canvas.style["border"] = "0";
                    this._canvas.style["outline"] = "0";
                    this._canvas.style["left"] = "0";
                    this._canvas.style["top"] = "0";
                    this._canvas.style["width"] = "100%";
                    this._canvas.style["height"] = "100%";
                    this._canvas.style["z-index"] = "-1";
                    this._canvas.style["background-color"]="#1f1f1f";
                    this._canvas.id = "bgCanvas";
                    this._onResize();

                    this._context = this._canvas.getContext("2d");
                    this._context.clearRect(0, 0, this._width, this._height);
                    this._context.globalAlpha = this._options.colorAlpha;

                    window.addEventListener("resize", this._onResize);
                    window.addEventListener("scroll", this._onScroll);
                    document.body.appendChild(this._canvas);
                }
                catch (e) {
                    console.warn("Canvas Context Error: " + e.toString());
                    return;
                }
                this._onDraw();
            },

            // Create a new random ribbon and to the list
            addRibbon: function ()
            {
                // movement data
                var dir = Math.round(random(1, 9)) > 5 ? "right" : "left",
                    stop = 1000,
                    hide = 200,
                    min = 0 - hide,
                    max = this._width + hide,
                    movex = 0,
                    movey = 0,
                    startx = dir === "right" ? min : max,
                    starty = Math.round(random(0, this._height));

                // asjust starty based on options
                if (/^(top|min)$/i.test(this._options.verticalPosition))
                {
                    starty = 0 + hide;
                } else
                if (/^(middle|center)$/i.test(this._options.verticalPosition))
                {
                    starty = this._height / 2;
                } else
                if (/^(bottom|max)$/i.test(this._options.verticalPosition))
                {
                    starty = this._height - hide;
                }

                // ribbon sections data
                var ribbon = [],
                    point1 = new Point(startx, starty),
                    point2 = new Point(startx, starty),
                    point3 = null,
                    color = Math.round(random(0, 360)),
                    delay = 0;

                // buils ribbon sections
                while (true)
                {
                    if (stop <= 0) break;stop--;

                    movex = Math.round((Math.random() * 1 - 0.2) * this._options.horizontalSpeed);
                    movey = Math.round((Math.random() * 1 - 0.5) * (this._height * 0.25));

                    point3 = new Point();
                    point3.copy(point2);

                    if (dir === "right")
                    {
                        point3.add(movex, movey);
                        if (point2.x >= max) break;
                    } else
                    if (dir === "left")
                    {
                        point3.subtract(movex, movey);
                        if (point2.x <= min) break;
                    }
                    // point3.clampY( 0, this._height );

                    ribbon.push({ // single ribbon section
                        point1: new Point(point1.x, point1.y),
                        point2: new Point(point2.x, point2.y),
                        point3: point3,
                        color: color,
                        delay: delay,
                        dir: dir,
                        alpha: 0,
                        phase: 0 });


                    point1.copy(point2);
                    point2.copy(point3);

                    delay += 4;
                    color += this._options.colorCycleSpeed;
                }
                this._ribbons.push(ribbon);
            },

            // Draw single section
            _drawRibbonSection: function (section)
            {
                if (section)
                {
                    if (section.phase >= 1 && section.alpha <= 0)
                    {
                        return true; // done
                    }
                    if (section.delay <= 0)
                    {
                        section.phase += 0.02;
                        section.alpha = Math.sin(section.phase) * 1;
                        section.alpha = section.alpha <= 0 ? 0 : section.alpha;
                        section.alpha = section.alpha >= 1 ? 1 : section.alpha;

                        if (this._options.animateSections)
                        {
                            var mod = Math.sin(1 + section.phase * Math.PI / 2) * 0.1;

                            if (section.dir === "right")
                            {
                                section.point1.add(mod, 0);
                                section.point2.add(mod, 0);
                                section.point3.add(mod, 0);
                            } else {
                                section.point1.subtract(mod, 0);
                                section.point2.subtract(mod, 0);
                                section.point3.subtract(mod, 0);
                            }
                            section.point1.add(0, mod);
                            section.point2.add(0, mod);
                            section.point3.add(0, mod);
                        }
                    } else
                    {section.delay -= 0.5;}

                    var s = this._options.colorSaturation,
                        l = this._options.colorBrightness,
                        c = "hsla(" + section.color + ", " + s + ", " + l + ", " + section.alpha + " )";

                    this._context.save();

                    if (this._options.parallaxAmount !== 0)
                    {
                        this._context.translate(0, this._scroll * this._options.parallaxAmount);
                    }
                    this._context.beginPath();
                    this._context.moveTo(section.point1.x, section.point1.y);
                    this._context.lineTo(section.point2.x, section.point2.y);
                    this._context.lineTo(section.point3.x, section.point3.y);
                    this._context.fillStyle = c;
                    this._context.fill();

                    if (this._options.strokeSize > 0)
                    {
                        this._context.lineWidth = this._options.strokeSize;
                        this._context.strokeStyle = c;
                        this._context.lineCap = "round";
                        this._context.stroke();
                    }
                    this._context.restore();
                }
                return false; // not done yet
            },

            // Draw ribbons
            _onDraw: function ()
            {
                // cleanup on ribbons list to rtemoved finished ribbons
                for (var i = 0, t = this._ribbons.length; i < t; ++i)
                {
                    if (!this._ribbons[i])
                    {
                        this._ribbons.splice(i, 1);
                    }
                }

                // draw new ribbons
                this._context.clearRect(0, 0, this._width, this._height);

                for (var a = 0; a < this._ribbons.length; ++a) // single ribbon
                {
                    var ribbon = this._ribbons[a],
                        numSections = ribbon.length,
                        numDone = 0;

                    for (var b = 0; b < numSections; ++b) // ribbon section
                    {
                        if (this._drawRibbonSection(ribbon[b]))
                        {
                            numDone++; // section done
                        }
                    }
                    if (numDone >= numSections) // ribbon done
                    {
                        this._ribbons[a] = null;
                    }
                }
                // maintain optional number of ribbons on canvas
                if (this._ribbons.length < this._options.ribbonCount)
                {
                    this.addRibbon();
                }
                requestAnimationFrame(this._onDraw);
            },

            // Update container size info
            _onResize: function (e)
            {
                var screen = screenInfo(e);
                this._width = screen.width;
                this._height = screen.height;

                if (this._canvas)
                {
                    this._canvas.width = this._width;
                    this._canvas.height = this._height;

                    if (this._context)
                    {
                        this._context.globalAlpha = this._options.colorAlpha;
                    }
                }
            },

            // Update container size info
            _onScroll: function (e)
            {
                var screen = screenInfo(e);
                this._scroll = screen.scrolly;
            } };
        // export
        return Factory;
    });
    new Ribbons();

</script>
</body>
<style>

</style>
</html>