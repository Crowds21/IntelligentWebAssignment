Index: routes/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>var express = require('express');\nvar router = express.Router();\nvar userController = require('../controller/userController')\nvar sightController = require('../controller/sightController')\nconst {response} = require(\"express\");\nconst multer = require(\"multer\");\n\nvar storage = multer.diskStorage({\n    // 指定上传文件的保存目录\n    destination: function (req, file, cb) {\n        cb(null, 'public/uploads/');\n    },\n    // 指定上传文件的保存名称\n    filename: function (req, file, cb) {\n        // 获取上传文件的原始名称\n        var original = file.originalname;\n        // 获取上传文件的扩展名\n        var file_extension = original.split(\".\");\n        // 将文件名设置为当前日期加上扩展名\n        let filename = Date.now() + '.' + file_extension[file_extension.length - 1];\n        cb(null, filename);\n    }\n});\n// 创建一个 multer 对象，指定文件的保存方式\nvar upload = multer({storage: storage});\n\n\n/* GET home page. */\nrouter.get('/', async function (req, res, next) {\n    console.log(\"UrlPath: /\")\n    // await sightController.initSightCollection()\n    let data = await sightController.getSightList()\n    res.render('index', {records: data, title: \"sight\"});\n});\nrouter.get('/maps', function (req, res, next) {\n    let result = sightController.testDBPedia()\n    // getBirdInfoFromGraph(\"chicken\").then(result =>{\n    //     console.log((\"BirdInfo\"))\n    //     console.log(result)\n    //\n    // })\n    res.render('maps')\n})\nrouter.get('/sortByDate', async function (req, res, next) {\n    let data = await sightController.getSightListByDateDesc()\n    res.render('index', {records: data});\n});\n\nrouter.get('/sortByDistance', async function (req, res, next) {\n    let data = await sightController.getSightsByLocation()\n    res.render('index', {records: data})\n})\nrouter.get('/sightDetails/:id', async function (req, res, next) {\n    let id = req.params.id;\n    console.log(\"/sightDetails/\" + id)\n    let recordData = await sightController.getSightById(id);\n    //mock data\n    let messages = [{\n        username: \"Crowds\",\n        date: \"2023/04/10\",\n        content: \"This is a chat msg\"\n    }, {\n        username: \"Crowds\",\n        date: \"2023/04/09\",\n        content: \"This is a chat msg\"\n    }]\n    res.render('sightDetails', {record: recordData, messages: messages});\n});\nrouter.post('/setUser', function (req, res) {\n    userController.createUserInMongo(req, res).then(r => {\n\n    })\n});\n\nrouter.post('/saveSighting', upload.single('image'), async function (req, res) {\n    console.log(\"SaveSighting\")\n    sightController.insertSight(req).then(r => {\n        res.send({\n            message: \"success\",\n        });\n    })\n});\n\n//Mock\nrouter.get('/sightDetails', function (req, res, next) {\n    let data = {\n        identification: \"unknown\",\n        description: \"This is a description\",\n        date: \"2023-02-03 \",\n        user_name: \"crowds\",\n        location: \"Sheffield\",\n        image: \"https://picsum.photos/100\",\n        wiki: \"www.baidu.com\"\n    }\n\n    let messages = [\n        {\n            username: \"Crowds\",\n            date: \"2023/04/10\",\n            content: \"This is a chat msg\"\n        },\n        {\n            username: \"Crowds\",\n            date: \"2023/04/09\",\n            content: \"This is a chat msg\"\n        }]\n    res.render('sightDetails', {record: data, messages: messages})\n})\n\nmodule.exports = router;\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/routes/index.js b/routes/index.js
--- a/routes/index.js	(revision 5f035eecfaeea2a3d8ea68e793bf9339c695b246)
+++ b/routes/index.js	(date 1682965455613)
@@ -74,11 +74,8 @@
 
 router.post('/saveSighting', upload.single('image'), async function (req, res) {
     console.log("SaveSighting")
-    sightController.insertSight(req).then(r => {
-        res.send({
-            message: "success",
-        });
-    })
+    await sightController.insertSight(req)
+    return res.status(200).json({message: 'Success'});
 });
 
 //Mock
Index: model/sightModel.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const mongoose = require(\"mongoose\");\n\nconst SightSchema = mongoose.Schema({\n    identification: {type: String, required: true},\n    description: {type: String, required: true},\n    date: {type: String, required: true},\n    user_name: {type: String, required: true},\n    location: {type: String, required: false},\n    loc: {\n        lat: String,\n        lng: String,\n        required: false\n    },\n    // lat: {type: Float32Array, required: false},\n    // lng: {type:}\n    image: {type: String, required: false}\n});\nSightSchema.set('toObject', {getters: true});\nmodule.exports = mongoose.model(\"sight\", SightSchema, \"sights\");\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/model/sightModel.js b/model/sightModel.js
--- a/model/sightModel.js	(revision 5f035eecfaeea2a3d8ea68e793bf9339c695b246)
+++ b/model/sightModel.js	(date 1682964675708)
@@ -11,8 +11,6 @@
         lng: String,
         required: false
     },
-    // lat: {type: Float32Array, required: false},
-    // lng: {type:}
     image: {type: String, required: false}
 });
 SightSchema.set('toObject', {getters: true});
Index: public/javascripts/apiRequest.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Template code\n// async function getSightList() {\n//     try {\n//         const response = await fetch('/getSightList', { method: 'GET' });\n//         const data = await response.json();\n//         return data;\n//     } catch (error) {\n//         console.error(error);\n//     }\n// }\n\nasync function addSight() {\n    const date = document.getElementById('date').value;\n    const description = document.getElementById('description').value;\n    const identification = document.getElementById('identification').value;\n    const image = document.getElementById('image').files[0];\n    const loc = {\"lat\": sessionStorage.getItem(\"lat\"), \"lng\": sessionStorage.getItem(\"lng\")}\n    const userExist = await isUserExist();\n    const username = userExist.username;\n\n    const sightData = new FormData();\n    sightData.append('date', date);\n    sightData.append('description', description);\n    sightData.append('identification', identification);\n    sightData.append('image', image);\n    sightData.append('user_name', username);\n    sightData.append('loc', JSON.stringify(loc));\n\n    await fetch('/saveSighting', {\n        method: 'POST',\n        body: sightData\n    }).then(data => {\n        console.log(data);\n        alert(\"Add Success!\")\n        closeModal();\n        window.location.reload();\n    }).catch(error => {\n        insetToSight(JSON.stringify(sightData))\n        // TODO Update UI\n    });\n}\n\nasync function sortByDate() {\n    const response = await fetch('/sortByDate', {method: 'GET'})\n    const stringPromise = response.text();\n    document.write(await stringPromise);\n\n}\n\nasync function sortByDistance() {\n    let latitude\n    let longitude\n    navigator.geolocation.getCurrentPosition(function (position) {\n        latitude = position.coords.latitude;\n        longitude = position.coords.longitude;\n    });\n    let url = `/sortByDistance?lat=${latitude}?lng=${longitude}`\n    const response = await fetch(url, {method: 'GET'})\n    const stringPromise = response.text();\n    document.write(await stringPromise);\n}\n\nasync function getDetails(event) {\n    let id = event.currentTarget.id\n    const response = await fetch('/sightDetails/' + id, {method: 'GET'})\n    const stringPromise = response.text();\n    document.write(await stringPromise);\n}\n\n\n// let elements = document.getElementsByClassName(\"home-page-sight-card\")\n// for (let i = 0; i < elements.length; i++) {\n//     console.log(i)\n//     elements[i].addEventListener(\"click\", function (event) {\n//         // 在这里添加事件处理逻辑\n//         getDetails(event).then(r => {\n//             console.log(\"Details Page\")\n//         })\n//     });\n// }\n\nwindow.addEventListener('online', async () => {\n    console.log('Network reconnected');\n\n    // 获取当前 Service Worker 注册\n    const registration = await navigator.serviceWorker.getRegistration();\n\n    if (registration) {\n        // 强制更新 Service Worker\n        registration.update().then(() => {\n            console.log('Service Worker updated');\n        });\n    }\n});
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/public/javascripts/apiRequest.js b/public/javascripts/apiRequest.js
--- a/public/javascripts/apiRequest.js	(revision 5f035eecfaeea2a3d8ea68e793bf9339c695b246)
+++ b/public/javascripts/apiRequest.js	(date 1682965206864)
@@ -26,7 +26,7 @@
     sightData.append('user_name', username);
     sightData.append('loc', JSON.stringify(loc));
 
-    await fetch('/saveSighting', {
+    fetch('/saveSighting', {
         method: 'POST',
         body: sightData
     }).then(data => {
@@ -35,7 +35,7 @@
         closeModal();
         window.location.reload();
     }).catch(error => {
-        insetToSight(JSON.stringify(sightData))
+        // insetToSight(JSON.stringify(sightData))
         // TODO Update UI
     });
 }
